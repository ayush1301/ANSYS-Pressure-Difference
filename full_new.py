import csv
import numpy as np
import matplotlib.pyplot as plt 
import matplotlib.tri as tri

def compare_data(files, divisions=1000):
    datas = []
    for fil in files:
        with open(fil, 'r', encoding='utf-8-sig') as f:
            reader = csv.reader(f)
            for row in reader:
                break
            datas.append(np.array([[float(cell) for cell in row] for row in reader]))

    xs, ys, zs, ps = ([] for i in range(4))

    for data in datas:
        xs.append(data[:,0])
        ys.append(data[:,1])
        zs.append(data[:,2])
        ps.append(data[:,3])

    columns = [xs, ys, zs, ps]
    #npts = len(xs[0])

    #Based on current config -- Only considering values which are in the box for the smaller graph
    lims = []
    lims.append([max( [ min(xs[0]), min(xs[1]) ] ), min( [ max(xs[0]), max(xs[1]) ] )])
    lims.append([max( [ min(ys[0]), min(ys[1]) ] ), min( [ max(ys[0]), max(ys[1]) ] )])
    lims.append([max( [ min(zs[0]), min(zs[1]) ] ), min( [ max(zs[0]), max(zs[1]) ] )])

    #Figuring out which plane the figure is in
    if len(set(xs[0])) == 1:
        lims.pop(0)
        columns.pop(0)
        plane = 'YZ'
    elif len(set(ys[0])) == 1:
        lims.pop(1)
        columns.pop(1)
        plane = 'XZ'
    elif len(set(zs[0])) == 1:
        lims.pop(2)
        columns.pop(2)
        plane = 'XY'
    else:
        raise RuntimeError('The values are not in xy xz or yz plane')
    
    #Something was deleted from here

    xi = np.linspace(lims[0][0], lims[0][1], divisions)
    yi = np.linspace(lims[1][0], lims[1][1], divisions)
    Xi, Yi = np.meshgrid(xi, yi)

    fig, axs = plt.subplots(3, sharex=True, sharey=True)
    fig.suptitle(f'Analysis in plane {plane} and divisions per axis = {divisions}')
    cntr = []
    zi = []
    #Plot the amended graphs
    for i in range(2):
        triang = tri.Triangulation(columns[0][i], columns[1][i])
        interpolator = tri.LinearTriInterpolator(triang, ps[i])
        zi.append(interpolator(Xi, Yi))
        axs[i].contour(xi, yi, zi[i], levels=30, linewidths=0.5, colors='k')
        cntr.append(axs[i].contourf(xi, yi, zi[i], levels=30, cmap="jet"))
        fig.colorbar(cntr[i], ax=axs[i])
        axs[i].set_title(f'Interpolated data generated from {files[i]} file')
        axs[i].set(xlim=(lims[0][0], lims[0][1]), ylim=(lims[1][0], lims[1][1]))

    #Plot the difference in the two
    difference = zi[0] - zi[1]
    axs[2].contour(xi, yi, difference, levels=30, linewidths=0.5, colors='k')
    cntr.append(axs[2].contourf(xi, yi, difference, levels=30, cmap="jet"))
    fig.colorbar(cntr[2], ax=axs[2])
    axs[2].set_title(f'Data generated by subtracting Second graph From First')
    axs[2].set(xlim=(lims[0][0], lims[0][1]), ylim=(lims[1][0], lims[1][1]))

    plt.show()